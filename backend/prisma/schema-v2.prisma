// CareFlow V2.0 - Nouvelle Architecture avec Établissement Central
// Basée sur le réseau GGA Sénégal et nouvelle logique métier
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ÉNUMÉRATIONS ÉTENDUES V2.0
// =====================================================

enum UserRole {
  PATIENT              // Inscription publique uniquement
  DOCTOR               // Créé par établissement (rôle passif)
  ESTABLISHMENT_ADMIN  // Nouvel acteur central et décisionnaire
  INSURER_AGENT        // Créé par compagnie d'assurance
  SUPER_ADMIN          // Équipe CareFlow pour onboarding clients
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SenegalRegion {
  DAKAR
  THIES
  SAINT_LOUIS
  DIOURBEL
  LOUGA
  TAMBACOUNDA
  KAOLACK
  ZIGUINCHOR
  FATICK
  KOLDA
  MATAM
  KAFFRINE
  KEDOUGOU
  SEDHIOU
}

enum EstablishmentType {
  PUBLIC_HOSPITAL      // Hôpitaux publics
  PRIVATE_CLINIC       // Cliniques privées du réseau GGA
  HEALTH_CENTER        // Centres de santé communautaires
  MEDICAL_CENTER       // Centres médicaux spécialisés
  SPECIALIZED_CENTER   // Centres spécialisés (dialyse, etc.)
  PHARMACY            // Pharmacies du réseau
  LABORATORY          // Laboratoires d'analyses
}

enum MedicalSpecialty {
  // Spécialités principales
  MEDECINE_GENERALE
  PEDIATRIE
  GYNECOLOGIE_OBSTETRIQUE
  CARDIOLOGIE
  NEUROLOGIE
  DERMATOLOGIE
  OPHTALMOLOGIE
  ORL
  ORTHOPEDE
  UROLOGIE
  ANESTHESIE_REANIMATION
  RADIOLOGIE
  CHIRURGIE_GENERALE
  MEDECINE_INTERNE
  
  // Spécialités adaptées Sénégal
  MALADIES_INFECTIEUSES
  MEDECINE_TROPICALE
  SANTE_PUBLIQUE
  PSYCHIATRIE
  RHUMATOLOGIE
  PNEUMOLOGIE
  GASTROENTEROLOGIE
  NEPHROLOGIE
  ENDOCRINOLOGIE
  HEMATOLOGIE
  ONCOLOGIE
}

enum InsuranceType {
  IPM                  // Institution Prévoyance Maladie (obligatoire salariés)
  MUTUELLE_COMMUNAUTAIRE // Mutuelles de santé locales
  ASSURANCE_PRIVEE     // NSIA, AXA, ASKIA, etc.
  CMU                  // Couverture Maladie Universelle
  AUTO_PAIEMENT        // Paiement direct sans assurance
}

enum InsurancePlan {
  BASIC               // 40-50% couverture
  STANDARD            // 60-70% couverture  
  PREMIUM             // 75-85% couverture
  ELITE               // 90%+ couverture
}

enum LanguageSpoken {
  FRANCAIS
  WOLOF
  PULAAR
  SERER
  MANDINKA
  DIOLA
  SONINKE
  BAMBARA
}

enum AppointmentStatus {
  REQUESTED           // Patient fait la demande
  PENDING_ASSIGNMENT  // Établissement doit assigner médecin
  CONFIRMED           // Médecin assigné et confirmé
  IN_PROGRESS         // Consultation en cours
  COMPLETED           // Terminé
  CANCELLED           // Annulé
  NO_SHOW             // Patient absent
  RESCHEDULED         // Reporté
}

enum CoverageStatus {
  PENDING             // En attente de vérification
  APPROVED            // Pris en charge
  REJECTED            // Refusé
  PARTIAL             // Prise en charge partielle
}

enum ServiceCategory {
  CONSULTATION        // Consultations générales/spécialisées
  EMERGENCY           // Urgences
  SURGERY             // Chirurgie
  IMAGING             // Imagerie médicale
  LABORATORY          // Analyses de laboratoire
  MATERNITY           // Maternité
  INTENSIVE_CARE      // Soins intensifs
  PHARMACY            // Pharmacie
  PHYSIOTHERAPY       // Kinésithérapie
  DENTAL              // Soins dentaires
  VACCINATION         // Vaccinations
  PREVENTION          // Médecine préventive
}

// =====================================================
// MODÈLES UTILISATEURS V2.0
// =====================================================

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole   @default(PATIENT)
  isActive  Boolean    @default(true)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations polymorphes
  patient           Patient?
  doctor            Doctor?
  establishmentAdmin EstablishmentAdmin?
  insurerAgent      InsurerAgent?

  @@map("users")
}

// =====================================================
// PATIENTS V2.0 (Multi-Assurance)
// =====================================================

model Patient {
  id               String            @id @default(uuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Identité
  nationalId       String?           @unique
  dateOfBirth      DateTime
  gender           Gender
  
  // Localisation
  address          String
  region           SenegalRegion     @default(DAKAR)
  city             String?
  neighborhood     String?           // Quartier pour Dakar
  
  // Contact d'urgence
  emergencyContact String
  emergencyPhone   String
  emergencyRelation String
  
  // Informations médicales
  bloodType        String?
  allergies        String[]          @default([])
  chronicConditions String[]         @default([])
  height           Float?            // en cm
  weight           Float?            // en kg
  
  // Préférences culturelles
  preferredLanguage LanguageSpoken   @default(FRANCAIS)
  
  // Relations NOUVELLES
  insurancePolicies PatientInsurance[] // Multi-assurance
  appointments      Appointment[]
  consultations     Consultation[]
  medicalRecords    MedicalRecord[]
  favoriteEstablishments PatientFavoriteEstablishment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

// =====================================================
// MULTI-ASSURANCE PATIENT
// =====================================================

model PatientInsurance {
  id              String                @id @default(uuid())
  patientId       String
  planId          String
  
  // Informations police
  policyNumber    String                @unique
  isPrimary       Boolean               @default(false) // Assurance principale
  validFrom       DateTime
  validUntil      DateTime
  
  // Status et couverture
  isActive        Boolean               @default(true)
  coverageDetails Json?                 // Détails spécifiques de couverture
  
  // Relations
  patient         Patient               @relation(fields: [patientId], references: [id])
  insurancePlan   InsurancePlanDetails  @relation(fields: [planId], references: [id])
  claims          InsuranceClaim[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_insurances")
}

// =====================================================
// ÉTABLISSEMENTS V2.0 (Acteur Central)
// =====================================================

model Establishment {
  id          String              @id @default(uuid())
  name        String
  type        EstablishmentType
  
  // Données réelles GGA
  ggaNetwork  Boolean             @default(false) // Fait partie du réseau GGA
  ggaCode     String?             // Code GGA si applicable
  
  // Localisation détaillée
  region      SenegalRegion
  city        String
  address     String
  latitude    Float?
  longitude   Float?
  
  // Contact
  phone       String
  email       String?
  website     String?
  
  // Services disponibles (selon données GGA)
  services    EstablishmentService[]
  
  // Capacités
  bedCapacity Int?
  hasEmergency Boolean            @default(false)
  hasMaternity Boolean            @default(false)
  hasIntensiveCare Boolean        @default(false)
  hasLaboratory Boolean           @default(false)
  hasPharmacy Boolean             @default(false)
  hasImaging  Boolean             @default(false)
  
  // Horaires d'ouverture
  openingHours Json?              // Structure : {"monday": {"open": "08:00", "close": "20:00"}, ...}
  
  // Relations NOUVELLES
  adminUsers      EstablishmentAdmin[]
  doctors         DoctorEstablishment[] // Liaison médecin-établissement
  appointments    Appointment[]
  insuranceAgreements EstablishmentInsurance[]
  patientFavorites PatientFavoriteEstablishment[]
  
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("establishments")
}

// =====================================================
// SERVICES PAR ÉTABLISSEMENT
// =====================================================

model EstablishmentService {
  id              String            @id @default(uuid())
  establishmentId String
  category        ServiceCategory
  name            String            // Ex: "Consultation Cardiologie"
  description     String?
  
  // Tarification
  basePrice       Decimal
  duration        Int               // en minutes
  
  // Disponibilité
  isActive        Boolean           @default(true)
  requiresAppointment Boolean       @default(true)
  
  // Relations
  establishment   Establishment     @relation(fields: [establishmentId], references: [id])
  appointments    Appointment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("establishment_services")
}

// =====================================================
// ADMINISTRAT<URS ÉTABLISSEMENT (Nouveaux Décisionnaires)
// =====================================================

model EstablishmentAdmin {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishmentId String
  
  // Rôle dans l'établissement
  title           String        // Ex: "Directeur Médical", "Coordinateur RDV"
  department      String?
  
  // Permissions
  canManageDoctors Boolean      @default(true)
  canManageAppointments Boolean @default(true)
  canManageServices Boolean     @default(false)
  canViewReports  Boolean       @default(true)
  
  // Relations
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("establishment_admins")
}

// =====================================================
// MÉDECINS V2.0 (Rôle Passif)
// =====================================================

model Doctor {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Identification professionnelle
  licenseNumber     String              @unique
  orderNumber       String?             // Numéro Ordre des Médecins
  
  // Spécialité principale
  specialty         MedicalSpecialty
  subSpecialties    String[]            @default([])
  
  // Formation et expérience
  experienceYears   Int
  education         String              // Formation initiale
  certifications    String[]            @default([])
  bio               String?
  
  // Préférences
  languagesSpoken   LanguageSpoken[]    @default([FRANCAIS, WOLOF])
  
  // Relations NOUVELLES
  establishments    DoctorEstablishment[] // Peut exercer dans plusieurs établissements
  assignments       DoctorAssignment[]    // Créneaux assignés par établissement
  consultations     Consultation[]
  
  isActive          Boolean             @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctors")
}

// =====================================================
// LIAISON MÉDECIN-ÉTABLISSEMENT
// =====================================================

model DoctorEstablishment {
  id              String        @id @default(uuid())
  doctorId        String
  establishmentId String
  
  // Statut dans l'établissement
  isPrimary       Boolean       @default(false) // Établissement principal
  startDate       DateTime
  endDate         DateTime?
  
  // Paramètres de travail
  department      String?       // Service/département
  consultationFee Decimal       // Tarif dans cet établissement
  
  // Planning par défaut (géré par établissement)
  defaultSchedule Json?         // Planning type assigné par l'établissement
  
  // Relations
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, establishmentId])
  @@map("doctor_establishments")
}

// =====================================================
// ASSIGNATIONS MÉDECIN PAR ÉTABLISSEMENT
// =====================================================

model DoctorAssignment {
  id              String        @id @default(uuid())
  doctorId        String
  establishmentId String
  
  // Créneau assigné par l'établissement
  assignedDate    DateTime
  startTime       DateTime
  endTime         DateTime
  
  // Type d'assignation
  serviceCategory ServiceCategory
  maxPatients     Int           @default(1)
  
  // Status
  isActive        Boolean       @default(true)
  notes           String?
  
  // Relations
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  appointments    Appointment[] // RDV sur ce créneau
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_assignments")
}

// =====================================================
// RENDEZ-VOUS V2.0 (Gérés par Établissement)
// =====================================================

model Appointment {
  id                String            @id @default(uuid())
  patientId         String
  establishmentId   String
  serviceId         String
  doctorId          String?           // Assigné APRÈS par établissement
  assignmentId      String?           // Créneau médecin assigné
  
  // Timing
  requestedDate     DateTime          // Date souhaitée par patient
  appointmentDate   DateTime?         // Date confirmée par établissement
  appointmentTime   DateTime?         // Heure confirmée
  duration          Int               @default(30)
  
  // Détails
  reason            String
  symptoms          String[]          @default([])
  isUrgent          Boolean           @default(false)
  status            AppointmentStatus @default(REQUESTED)
  
  // Assurance et paiement
  insuranceId       String?           // Assurance utilisée
  coverageStatus    CoverageStatus    @default(PENDING)
  totalCost         Decimal?
  coveredAmount     Decimal?
  patientAmount     Decimal?
  
  // Notes établissement/médecin
  establishmentNotes String?
  doctorNotes       String?
  
  // Relations
  patient           Patient               @relation(fields: [patientId], references: [id])
  establishment     Establishment         @relation(fields: [establishmentId], references: [id])
  service           EstablishmentService  @relation(fields: [serviceId], references: [id])
  doctor            Doctor?               @relation(fields: [doctorId], references: [id])
  assignment        DoctorAssignment?     @relation(fields: [assignmentId], references: [id])
  insurance         PatientInsurance?     @relation(fields: [insuranceId], references: [id])
  consultation      Consultation?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

// =====================================================
// CONSULTATIONS V2.0
// =====================================================

model Consultation {
  id            String @id @default(uuid())
  appointmentId String @unique
  patientId     String
  doctorId      String

  // Consultation details
  chiefComplaint String
  symptoms      String[]
  examination   String?
  diagnosis     String?
  treatment     String?
  notes         String?
  vitalSigns    Json?
  
  // Durée effective
  startTime     DateTime?
  endTime       DateTime?
  
  // Follow-up
  followUpDate  DateTime?
  followUpNotes String?

  // Relations
  appointment   Appointment    @relation(fields: [appointmentId], references: [id])
  patient       Patient        @relation(fields: [patientId], references: [id])
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  prescriptions Prescription[]
  medicalDocuments MedicalDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("consultations")
}

// =====================================================
// PRESCRIPTIONS V2.0
// =====================================================

model Prescription {
  id             String             @id @default(uuid())
  consultationId String
  medication     String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  isGeneric      Boolean            @default(false)
  
  // Relations
  consultation   Consultation       @relation(fields: [consultationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescriptions")
}

// =====================================================
// DOCUMENTS MÉDICAUX
// =====================================================

model MedicalDocument {
  id             String        @id @default(uuid())
  consultationId String?
  patientId      String
  
  type           String        // "prescription", "result", "image", "report"
  title          String
  description    String?
  fileUrl        String
  fileName       String
  fileSize       Int?
  mimeType       String?
  
  // Relations
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  patient        Patient       @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medical_documents")
}

// =====================================================
// COMPAGNIES D'ASSURANCE V2.0
// =====================================================

model InsuranceCompany {
  id            String                  @id @default(uuid())
  name          String                  @unique
  shortName     String                  // Ex: "NSIA", "IPM"
  type          InsuranceType
  
  // Contact et informations
  address       String
  phone         String
  email         String
  website       String?
  logo          String?
  
  // Couverture géographique
  regionsServed SenegalRegion[]
  
  // Relations
  plans         InsurancePlanDetails[]
  agents        InsurerAgent[]
  agreements    EstablishmentInsurance[]
  
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("insurance_companies")
}

// =====================================================
// PLANS D'ASSURANCE DÉTAILLÉS
// =====================================================

model InsurancePlanDetails {
  id                String                @id @default(uuid())
  companyId         String
  planType          InsurancePlan
  name              String
  description       String?
  
  // Tarification
  monthlyPremium    Decimal
  annualLimit       Decimal
  deductible        Decimal               @default(0)
  copaymentRate     Decimal               @default(0) // Pourcentage à la charge du patient
  
  // Couvertures par service
  consultationCoverage    Int             @default(70) // % de couverture
  emergencyCoverage       Int             @default(80)
  surgeryCoverage         Int             @default(60)
  maternityCoverse        Int             @default(70)
  dentalCoverage          Int             @default(50)
  visionCoverage          Int             @default(60)
  pharmacyCoverage        Int             @default(65)
  
  // Conditions
  waitingPeriod     Int                   @default(0) // Jours avant couverture
  maxAge            Int?                  // Âge limite
  preExistingConditions Boolean           @default(false) // Couvre conditions préexistantes
  
  // Bénéfices et exclusions
  benefits          String[]              @default([])
  exclusions        String[]              @default([])
  
  // Relations
  company           InsuranceCompany      @relation(fields: [companyId], references: [id])
  patientPolicies   PatientInsurance[]
  
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@map("insurance_plan_details")
}

// =====================================================
// AGENTS D'ASSURANCE
// =====================================================

model InsurerAgent {
  id             String           @id @default(uuid())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId      String
  
  // Informations professionnelles
  agentNumber    String           @unique
  licenseNumber  String?
  department     String?
  territory      SenegalRegion[]  @default([])
  
  // Relations
  company        InsuranceCompany @relation(fields: [companyId], references: [id])

  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insurer_agents")
}

// =====================================================
// ACCORDS ÉTABLISSEMENT-ASSURANCE
// =====================================================

model EstablishmentInsurance {
  id                String              @id @default(uuid())
  establishmentId   String
  companyId         String
  
  // Détails de l'accord
  agreementNumber   String              @unique
  validFrom         DateTime
  validUntil        DateTime
  
  // Taux de couverture négociés
  consultationRate  Decimal             @default(70)
  emergencyRate     Decimal             @default(80)
  surgeryRate       Decimal             @default(60)
  
  // Conditions particulières
  directBilling     Boolean             @default(false) // Tiers payant
  preAuthorization  Boolean             @default(false) // Pré-autorisation requise
  
  // Relations
  establishment     Establishment       @relation(fields: [establishmentId], references: [id])
  company           InsuranceCompany    @relation(fields: [companyId], references: [id])
  
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([establishmentId, companyId])
  @@map("establishment_insurances")
}

// =====================================================
// RÉCLAMATIONS D'ASSURANCE
// =====================================================

model InsuranceClaim {
  id                String              @id @default(uuid())
  appointmentId     String              @unique
  insuranceId       String
  
  // Informations de réclamation
  claimNumber       String              @unique
  amount            Decimal
  claimedAmount     Decimal
  approvedAmount    Decimal?
  
  // Status et traitement
  status            CoverageStatus      @default(PENDING)
  submittedAt       DateTime            @default(now())
  processedAt       DateTime?
  rejectionReason   String?
  
  // Documents
  documentUrls      String[]            @default([])
  
  // Relations
  appointment       Appointment         @relation(fields: [appointmentId], references: [id])
  insurance         PatientInsurance    @relation(fields: [insuranceId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insurance_claims")
}

// =====================================================
// DOSSIERS MÉDICAUX
// =====================================================

model MedicalRecord {
  id        String   @id @default(uuid())
  patientId String
  
  type      String   // "consultation", "emergency", "surgery", "lab_result"
  title     String
  content   String
  date      DateTime
  
  // Établissement source
  establishmentId String?
  
  // Fichiers joints
  attachments String[] @default([])
  
  // Relations
  patient   Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medical_records")
}

// =====================================================
// ÉTABLISSEMENTS FAVORIS PATIENT
// =====================================================

model PatientFavoriteEstablishment {
  id              String        @id @default(uuid())
  patientId       String
  establishmentId String
  
  // Relations
  patient         Patient       @relation(fields: [patientId], references: [id])
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  
  createdAt DateTime @default(now())

  @@unique([patientId, establishmentId])
  @@map("patient_favorite_establishments")
}